BACKGROUND OF THE INVENTION [0001] 1. Field of the Invention [0002] The field of the invention is data processing, or, more specifically, methods, apparatus, and products for speech-enabled web content searching using a multimodal browser. [0003] 2. Description of Related Art [0004] User interaction with applications running on small devices through a keyboard or stylus has become increasingly limited and cumbersome as those devices have become increasingly smaller. In particular, small handheld devices like mobile phones and PDAs serve many functions and contain sufficient processing power to support user interaction through multimodal access, that is, by interaction in non-voice modes as well as voice mode. Devices which support multimodal access combine multiple user input modes or channels in the same interaction allowing a user to interact with the applications on the device simultaneously through multiple input modes or channels. The methods of input include speech recognition, keyboard, touch screen, stylus, mouse, handwriting, and others. Multimodal input often makes using a small device easier. [0005] Multimodal applications are often formed by sets of markup documents served up by web servers for display on multimodal browsers. A ‘multimodal browser,’ as the term is used in this specification, generally means a web browser capable of receiving multimodal input and interacting with users with multimodal output, where modes of the multimodal input and output include at least a speech mode. Multimodal browsers typically render web pages written in XHTML+Voice (‘X+V’). X+V provides a markup language that enables users to interact with an multimodal application often running on a server through spoken dialog in addition to traditional means of input such as keyboard strokes and mouse pointer action. Visual markup tells a multimodal browser what the user interface is look like and how it is to behave when the user types, points, or clicks. Similarly, voice markup tells a multimodal browser what to do when the user speaks to it. For visual markup, the multimodal browser uses a graphics engine; for voice markup, the multimodal browser uses a speech engine. X+V adds spoken interaction to standard web content by integrating XHTML (eXtensible Hypertext Markup Language) and speech recognition vocabularies supported by VoiceXML. For visual markup, X+V includes the XHTML standard. For voice markup, X+V includes a subset of VoiceXML. For synchronizing the VoiceXML elements with corresponding visual interface elements, X+V uses events. XHTML includes voice modules that support speech synthesis, speech dialogs, command and control, and speech grammars. Voice handlers can be attached to XHTML elements and respond to specific events. Voice interaction features are integrated with XHTML and can consequently be used directly within XHTML content. [0006] In addition to X+V, multimodal applications also may be implemented with Speech Application Tags (‘SALT’). SALT is a markup language developed by the Salt Forum. Both X+V and SALT are markup languages for creating applications that use voice input/speech recognition and voice output/speech synthesis. Both SALT applications and X+V applications use underlying speech recognition and synthesis technologies or ‘speech engines’ to do the work of recognizing and generating human speech. As markup languages, both X+V and SALT provide markup-based programming environments for using speech engines in an application's user interface. Both languages have language elements, markup tags, that specify what the speech-recognition engine should listen for and what the synthesis engine should ‘say.’ Whereas X+V combines XHTML, VoiceXML, and the XML Events standard to create multimodal applications, SALT does not provide a standard visual markup language or eventing model. Rather, it is a low-level set of tags for specifying voice interaction that can be embedded into other environments. In addition to X+V and SALT, multimodal applications may be implemented in Java with a Java speech framework, in C++, for example, and with other technologies and in other environments as well. [0007] As smaller, handheld devices have become increasingly popular, more and more users are accessing web content through multimodal browsers that operate on these small, handheld devices. In order to aid users in finding relevant information, web pages may be designed to provide web content searching capabilities using a multimodal markup language such as X+V. Such speech-enabled searching of web content, however, is currently available only to those web pages that include speech-enabled web content, that is web content implemented using voice markup such as, for example, X+V. This drawback occurs because speech-enabled web content searching is currently implemented in the web page that contains the web content. Much of the current content on the web, however, is not speech-enabled because the web pages containing this content do not exploit the voice capabilities provided by markup languages that include voice markup such as X+V. As such, readers will appreciate that room for improvement exists in speech-enabled web content searching. SUMMARY OF THE INVENTION [0008] Speech-enabled web content searching using a multimodal browser implemented with one or more grammars in an automatic speech recognition (‘ASR’) engine, with the multimodal browser operating on a multimodal device supporting multiple modes of interaction including a voice mode and one or more non-voice modes, the multimodal browser operatively coupled to the ASR engine, includes: rendering, by the multimodal browser, web content; searching, by the multimodal browser, the web content for a search phrase, including yielding a matched search result, the search phrase specified by a first voice utterance received from a user and a search grammar; and performing, by the multimodal browser, an action in dependence upon the matched search result, the action specified by a second voice utterance received from the user and an action grammar. [0009] The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention. BRIEF DESCRIPTION OF THE DRAWINGS [0010] FIG. 1 sets forth a network diagram illustrating an exemplary system for speech-enabled web content searching using a multimodal browser according to embodiments of the present invention. [0011] FIG. 2 sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a voice server in speech-enabled web content searching using a multimodal browser according to embodiments of the present invention. [0012] FIG. 3 sets forth a functional block diagram of exemplary apparatus for speech-enabled web content searching using a multimodal browser according to embodiments of the present invention. [0013] FIG. 4 sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a multimodal device in speech-enabled web content searching using a multimodal browser according to embodiments of the present invention. [0014] FIG. 5 sets forth a flow chart illustrating an exemplary method of speech-enabled web content searching using a multimodal browser according to embodiments of the present invention. [0015] FIG. 6 sets forth a flow chart illustrating a further exemplary method of speech-enabled web content searching using a multimodal browser according to embodiments of the present invention. DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS [0016] Exemplary methods, apparatus, and products for speech-enabled web content searching using a multimodal browser according to embodiments of the present invention are described with reference to the accompanying drawings, beginning with FIG. 1. FIG. 1 sets forth a network diagram illustrating an exemplary system for speech-enabled web content searching using a multimodal browser according to embodiments of the present invention. Speech-enabled web content searching using a multimodal browser in this example is implemented with a multimodal browser (196) operating on a multimodal device (152). The multimodal browser (196) provides an execution environment for web page (195). The web page (195) is an information resource containing web content that can be accessed through a browser. The web page (195) is implemented according to a markup language such as, for example, HyperText Markup Language (‘HTML’), eXtensible Hypertext Markup Language (‘XHTML’), X+V, or other markup languages as will occur to those of skill in the art. Web content is the textual, visual or aural content of the web that is presented to a user along with metadata describing such content. Web content may include, among other things, text, images, sounds, videos, and animations. [0017] The multimodal device (152) of FIG. 1 supports multiple modes of interaction including a voice mode and one or more non-voice modes of user interaction with the multimodal application (195). The voice mode is represented here with audio output of voice prompts and responses (177) from the multimodal devices and audio input of speech for recognition (315) from a user (128). Non-voice modes are represented by input/output devices such as keyboards and display screens on the multimodal devices (152). The multimodal browser is operatively coupled to an automatic speed recognition (‘ASR’) engine (150). The operative coupling may be implemented with an application programming interface (‘API’), a voice service module, or a VOIP connection as explained more detail below. [0018] In the exemplary system of FIG. 1, the multimodal browser (196) includes a set of computer program instructions configured for speech-enabled web content searching according to embodiments of the present invention. The multimodal browser (196) of FIG. 1 operates generally for speech-enabled web content searching according to embodiments of the present invention by: rendering web content; searching the web content for a search phrase, including yielding a matched search result, the search phrase specified by a first voice utterance received from a user and a search grammar; and performing an action in dependence upon the matched search result, the action specified by a second voice utterance received from the user and an action grammar. Speech-enabled web content searching using a multimodal browser according to embodiments of the present invention advantageously allows a multimodal browser to provide speech-enabled search capabilities for any web content regardless of whether the web content is speech enabled. Web content is speech enabled when the author of the content implemented the web content using technologies that provide voice interaction between a human and a computer such as, for example, X+V. Web content is not speech-enabled when the author of the content implemented the web content using technologies that do not provide voice interaction between a human and a computer such as, for example, HTML. [0019] Speech-enabled web content searching using a multimodal browser (195) is implemented with one or more grammars in the ASR engine (150). A grammar communicates to the ASR engine (150) the words and sequences of words that currently may be recognized. A grammar typically includes grammar rules that advise an ASR engine or a voice interpreter which words and word sequences presently can be recognized. Grammars for use according to embodiments of the present invention may be expressed in any format supported by an ASR engine, including, for example, the Java Speech Grammar Format (‘JSGF’), the format of the W3C Speech Recognition Grammar Specification (‘SRGS’), the Augmented Backus-Naur Format (‘ABNF’) from the IETF's RFC2234, in the form of a stochastic grammar as described in the W3C's Stochastic Language Models (N-Gram) Specification, and in other grammar formats as may occur to those of skill in the art. Grammars typically operate as elements of dialogs, such as, for example, a VoiceXML <menu> or an X+V<form>. A grammar's definition may be expressed in-line in a dialog. Or the grammar may be implemented externally in a separate grammar document and referenced from with a dialog with a URI. Here is an example of a grammar expressed in JSFG: [0000] <grammar scope=“dialog” ><![CDATA[    #JSGF V1.0;    grammar command;    <command> = [remind me to] call | phone | telephone <name>    <when>;    <name> = bob | martha | joe | pete | chris | john | artoush | tom;    <when> = today | this afternoon | tomorrow | next week;    ]]> </grammar> [0020] In this example, the elements named <command>, <name>, and <when> are rules of the grammar. Rules are a combination of a rulename and an expansion of a rule that advises an ASR engine or a VoiceXML interpreter which words presently can be recognized. In the example above, rule expansions includes conjunction and disjunction, and the vertical bars ‘|’ mean ‘or.’ An ASR engine or a VoiceXML interpreter processes the rules in sequence, first <command>, then <name>, then <when>. The <command> rule accepts for recognition ‘call’ or ‘phone’ or ‘telephone’ plus, that is, in conjunction with, whatever is returned from the <name> rule and the <when> rule. The <name> rule accepts ‘bob’ or ‘martha’ or ‘joe’ or ‘pete’ or ‘chris’ or ‘john’ or ‘artoush’ or ‘tom,’ and the <when> rule accepts ‘today’ or ‘this afternoon’ or ‘tomorrow’ or ‘next week.’ The command grammar as a whole matches utterances like these, for example: “phone bob next week,” “telephone martha this afternoon,” “remind me to call chris tomorrow,” and “remind me to phone pete today.” [0025] The exemplary grammar above is implemented using static grammar rules. Readers will note, however, that grammars useful according to embodiments of the present invention may also be implemented using dynamically defined grammar rules that are specified by the grammar as rules that are not to be processed by the ASR until after at least one static rule has been matched. Such dynamic rules are dynamically defined at run time as a new static rule in dependence upon a matched value of a previously matched static rule. The following grammar, for example: [0000] <grammar id=“exampleGrammar”>    <<brand>> = http://groceries.com/brand.jsp    <command> = add <<brand>>(<item>) <item> to my shopping list    <item> = peppers | tomatoes | toothpaste </grammar> uses a double-bracket syntax and a parameter list to specify the <<brand>> rule as a dynamic rule that is not to be processed by an ASR until after the <item> rule has been matched. In this <<brand>> example, the static <command> rule contains a rule reference: <<brand>>(<item>) that is specified by the grammar's double-bracket syntax to be a dynamic rule reference to the dynamic <<brand>> rule. The dynamic rule reference <<brand>> is characterized by a static rule parameter list (<item>) that includes a one static rule reference <item> specifying a static rule, here named <item>, required to be matched by the ASR engine before processing the dynamic rule <<brand>>. The parameter list (<item>) is attached to the <<brand>> rule in a manner reminiscent of the parameter list in a traditional C-style function call. In this example, there is only one entry in the parameter list, <item>, but the list could contain any number of rule references. The <command> and <item> rules are said to be ‘static’ rules in that they are traditional rules of a voice recognition grammar. That is, the term ‘static’ is used in this specification to refer to any rule of a grammar that is not a dynamic rule according to embodiments of the present invention. [0027] The dynamic <<brand>> rule is initially defined in this example grammar only by a URL: <<brand>>=http://groceries.com/brand.jsp [0029] The URL identifies a computer resource capable of dynamically defining at run time the dynamic <<brand>> rule of the grammar as a new static rule in dependence upon matched value from the <item> rule, the rule required to be matched before the dynamic rule is processed. In this example, the computer resource so identified is a Java Server Page (‘JSP’) located at http://groceries.com. The JSP is a computer resource that is programmed to define the dynamic <<brand>> rule of the grammar as a new static rule in dependence upon matched value from the <item> rule. The ASR engine expands the definition of the <<brand>> rule with the results of the match from the <item> rule and provides the expansion to the JSP page to return a new static rule. In this way, the ASR engine may dynamically define the dynamic rule at run time as a new static rule by expanding the definition of the dynamic rule with a matched value of the referenced static <item> rule. If the <item> rule were matched with “peppers,” for example, then the definition of the dynamic <<brand>> rule may be expanded as: http://groceries.com/brand.jsp?item=“peppers” [0031] And the new static rule returned from the JSP page may be, for example: [0032] <brand>=brand a|brand b|brand c [0000] If the <item> rule were matched with “tomatoes,” for example, then the definition of the dynamic <<brand>> rule may be expanded as: http://groceries.com/brandjsp?item=“tomatoes” [0034] And the new static rule returned from the JSP page may be, for example: <brand>=brand f|brand g|brand h [0036] If the <item> rule were matched with “toothpaste,” for example, then the definition of the dynamic <<brand>> rule may be expanded as: http://groceries.com/brand.jsp?item=“toothpaste” [0038] And the new static rule returned from the JSP page may be, for example: <brand>=colgate|palmolive|crest [0040] And so on—with a different definition of the new static rule possible for each matched value of the referenced static <item> rule. [0041] Note that in this example, the dynamic <<brand>> rule occurs in document order after the static <item> rule whose match value is required before the dynamic rule can be processed. In this example, the ASR engine typically will match the <item> rule in document order before processing the <<brand>> rule. This document order, however, is not a limitation of the present invention. The static and dynamic rules may occur in any document order in the grammar, and, if a dynamic rule is set forth in the grammar ahead of a static rule upon which the dynamic rule depends, then the ASR engine is configured to make more than one pass through the grammar, treating the dynamic rule in the meantime as a rule that matches any speech in the utterance until a next rule match, a next token match, or the end of processing of the pertinent user utterance. [0042] As mentioned above, the multimodal browser (196) provides an execution environment for the web page (195). To support the multimodal browser (196) in speech-enabled web page searching, the system of FIG. 1 includes a VoiceXML interpreter (192). The VoiceXML interpreter (192) is a software module of computer program instructions that accepts voice dialog instructions from a web page or the multimodal browser itself, typically in the form of a VoiceXML <form> element. The voice dialog instructions include one or more grammars, data input elements, event handlers, and so on, that advise the VoiceXML interpreter (192) how to administer voice input from a user and voice prompts and responses to be presented to a user. The VoiceXML interpreter (192) administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm (‘FIA’). [0043] A multimodal device on which a multimodal browser operates is an automated device, that is, automated computing machinery or a computer program running on an automated device, that is capable of accepting from users more than one mode of input, keyboard, mouse, stylus, and so on, including speech input—and also providing more than one mode of output such as, graphic, speech, and so on. A multimodal device is generally capable of accepting speech input from a user, digitizing the speech, and providing digitized speech to a speech engine for recognition. A multimodal device may be implemented, for example, as a voice-enabled browser on a laptop, a voice browser on a telephone handset, an online game implemented with Java on a personal computer, and with other combinations of hardware and software as may occur to those of skill in the art. [0044] The system of FIG. 1 includes several exemplary multimodal devices: personal computer (107) which is coupled for data communications to data communications network (100) through wireline connection (120), personal digital assistant (‘PDA’) (112) which is coupled for data communications to data communications network (100) through wireless connection (114), mobile telephone (110) which is coupled for data communications to data communications network (100) through wireless connection (116), and laptop computer (126) which is coupled for data communications to data communications network (100) through wireless connection (118). [0049] Each of the example multimodal devices (152) in the system of FIG. 1 includes a microphone, an audio amplifier, a digital-to-analog converter, and a multimodal browser capable of accepting from a user (128) speech for recognition (315), digitizing the speech, and providing the digitized speech to a speech engine for recognition. The speech may be digitized according to industry standard codecs, including but not limited to those used for Distributed Speech Recognition as such. Methods for ‘COding/DECoding’ speech are referred to as ‘codecs.’ The European Telecommunications Standards Institute (‘ETSI’) provides several codecs for encoding speech for use in DSR, including, for example, the ETSI ES 201 108 DSR Front-end Codec, the ETSI ES 202 050 Advanced DSR Front-end Codec, the ETSI ES 202 211 Extended DSR Front-end Codec, and the ETSI ES 202 212 Extended Advanced DSR Front-end Codec. In standards such as RFC3557 entitled RTP Payload Format for European Telecommunications Standards Institute (ETSI) European Standard ES 201 108 Distributed Speech Recognition Encoding and the Internet Draft entitled RTP Payload Formats for European Telecommunications Standards Institute (ETSI) European Standard ES 202 050, ES 202 211, and ES 202 212 Distributed Speech Recognition Encoding, the IETF provides standard RTP payload formats for various codecs. It is useful to note, therefore, that there is no limitation in the present invention regarding codecs, payload formats, or packet structures. Speech for speech-enabled web content searching using a multimodal browser according to embodiments of the present invention may be encoded with any codec, including, for example: AMR (Adaptive Multi-Rate Speech coder) ARDOR (Adaptive Rate-Distortion Optimized sound codeR), Dolby Digital (A/52, AC3), DTS (DTS Coherent Acoustics), MP1 (MPEG audio layer-1), MP2 (MPEG audio layer-2) Layer 2 audio codec (MPEG-1, MPEG-2 and non-ISO MPEG-2.5), MP3 (MPEG audio layer-3) Layer 3 audio codec (MPEG-1, MPEG-2 and non-ISO MPEG-2.5), Perceptual Audio Coding, FS-1015 (LPC-10), FS-1016 (CELP), G.726 (ADPCM), G.728 (LD-CELP), G.729 (CS-ACELP), GSM, HILN (MPEG-4 Parametric audio coding), and others as may occur to those of skill in the art. [0068] As mentioned, a multimodal device according to embodiments of the present invention is capable of providing speech to a speech engine for recognition. The speech engine (153) of FIG. 1 is a functional module, typically a software module, although it may include specialized hardware also, that does the work of recognizing and generating or ‘synthesizing’ human speech. The speech engine (153) implements speech recognition by use of a further module referred to in this specification as a ASR engine (150), and the speech engine carries out speech synthesis by use of a further module referred to in this specification as a text-to-speech (‘TTS’) engine (not shown). As shown in FIG. 1, a speech engine (153) may be installed locally in the multimodal device (107) itself, or a speech engine (153) may be installed remotely with respect to the multimodal device, across a data communications network (100) in a voice server (151). A multimodal device that itself contains its own speech engine is said to implement a ‘thick multimodal client’ or ‘thick client,’ because the thick multimodal client device itself contains all the functionality needed to carry out speech recognition and speech synthesis—through API calls to speech recognition and speech synthesis modules in the multimodal device itself with no need to send requests for speech recognition across a network and no need to receive synthesized speech across a network from a remote voice server. A multimodal device that does not contain its own speech engine is said to implement a ‘thin multimodal client’ or simply a ‘thin client,’ because the thin multimodal client itself contains only a relatively thin layer of multimodal browser software that obtains speech recognition and speech synthesis services from a voice server located remotely across a network from the thin client. For ease of explanation, only one (107) of the multimodal devices (152) in the system of FIG. 1 is shown with a speech engine (153), but readers will recognize that any multimodal device may have a speech engine according to embodiments of the present invention. [0069] The multimodal browser (196) in this example provides speech for recognition and text for speech synthesis to a speech engine through the VoiceXML interpreter (192). As shown in FIG. 1, the VoiceXML interpreter (192) may be installed locally in the multimodal device (107) itself, or the VoiceXML interpreter (192) may be installed remotely with respect to the multimodal device, across a data communications network (100) in a voice server (151). In a thick client architecture, a multimodal device (152) includes both its own speech engine (153) and its own VoiceXML interpreter (192). The VoiceXML interpreter (192) exposes an API to the multimodal browser (196) for use in providing speech recognition and speech synthesis for the multimodal browser. The multimodal browser (196) provides dialog instructions, VoiceXML <form> elements, grammars, input elements, event handlers, and so on, through the API to the VoiceXML interpreter, and the VoiceXML interpreter administers the speech engine on behalf of the multimodal browser. In the thick client architecture, VoiceXML dialogs are interpreted by a VoiceXML interpreter on the multimodal device. In the thin client architecture, VoiceXML dialogs are interpreted by a VoiceXML interpreter on a voice server (151) located remotely across a data communications network (100) from the multimodal device running the multimodal browser (196). [0070] The VoiceXML interpreter (192) provides grammars, speech for recognition, and text prompts for speech synthesis to the speech engine (153), and the VoiceXML interpreter (192) returns to the multimodal browser speech engine (153) output in the form of recognized speech, semantic interpretation results, and digitized speech for voice prompts. In a thin client architecture, the VoiceXML interpreter (192) is located remotely from the multimodal client device in a voice server (151), the API for the VoiceXML interpreter is still implemented in the multimodal device (152), with the API modified to communicate voice dialog instructions, speech for recognition, and text and voice prompts to and from the VoiceXML interpreter on the voice server (151). For ease of explanation, only one (107) of the multimodal devices (152) in the system of FIG. 1 is shown with a VoiceXML interpreter (192), but readers will recognize that any multimodal device may have a VoiceXML interpreter according to embodiments of the present invention. Each of the example multimodal devices (152) in the system of FIG. 1 may support speech-enabled web content searching using a multimodal browser by installing and running on the multimodal device a VoiceXML interpreter that processes grammars and speech input using an ASR engine. [0071] The use of these four example multimodal devices (152) is for explanation only, not for limitation of the invention. Any automated computing machinery capable of accepting speech from a user, providing the speech digitized to an ASR engine, and receiving and playing speech prompts and responses from the ASR engine may be improved to function as a multimodal device according to embodiments of the present invention. [0072] The system of FIG. 1 also includes a voice server (151), which is connected to data communications network (100) through wireline connection (122). The voice server (151) is a computer that runs a speech engine (153) that provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning text representing recognized speech. Voice server (151) also provides speech synthesis, text to speech (‘TTS’) conversion, for voice prompts and voice responses (314) to user input in multimodal browsers that present web pages implemented using, for example, HTML, XHTML, or X+V. [0073] The system of FIG. 1 includes a data communications network (100) that connects the multimodal devices (152) and the voice server (151) for data communications. A data communications network for speech-enabled web content searching using a multimodal browser according to embodiments of the present invention is a data communications data communications network composed of a plurality of computers that function as data communications routers connected for data communications with packet switching protocols. Such a data communications network may be implemented with optical connections, wireline connections, or with wireless connections. Such a data communications network may include intranets, internets, local area data communications networks (‘LANs’), and wide area data communications networks (‘WANs’). Such a data communications network may implement, for example: a link layer with the Ethernet™ Protocol or the Wireless Ethernet™ Protocol, a data communications network layer with the Internet Protocol (‘IP’), a transport layer with the Transmission Control Protocol (‘TCP’) or the User Datagram Protocol (‘UDP’), an application layer with the HyperText Transfer Protocol (‘HTTP’), the Session Initiation Protocol (‘SIP’), the Real Time Protocol (‘RTP’), the Distributed Multimodal Synchronization Protocol (‘DMSP’), the Wireless Access Protocol (‘WAP’), the Handheld Device Transfer Protocol (‘HDTP’), the ITU protocol known as H.323, and other protocols as will occur to those of skill in the art. [0079] The system of FIG. 1 also includes a web server (147) connected for data communications through wireline connection (123) to network (100) and therefore to the multimodal devices (152). The web server (147) may be any server that provides to client devices web pages implemented according to markup language such as, for example, HTML, XHTML, or X+V. The web server (147) typically provides such markup documents via a data communications protocol, HTTP, HDTP, WAP, or the like. That is, although the term ‘web’ is used to described the web server generally in this specification, there is no limitation of data communications between multimodal devices and the web server to HTTP alone. A multimodal browser in a multimodal device then, upon receiving from the web sever (147) a web page, may provide speech-enabled web content searching according to embodiments of the present invention using a VoiceXML interpreter (192) and speech engine (153) in the multimodal device itself or by use of a VoiceXML interpreter (192) and speech engine (153) located remotely from the multimodal device in a voice server (151). [0080] The arrangement of the multimodal devices (152), the web server (147), the voice server (151), and the data communications network (100) making up the exemplary system illustrated in FIG. 1 are for explanation, not for limitation. Data processing systems useful for speech-enabled web content searching using a multimodal browser according to various embodiments of the present invention may include additional servers, routers, other devices, and peer-to-peer architectures, not shown in FIG. 1, as will occur to those of skill in the art. Data communications networks in such data processing systems may support many data communications protocols in addition to those noted above. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in FIG. 1. [0081] Speech-enabled web content searching using a multimodal browser according to embodiments of the present invention in a thin client architecture may be implemented with one or more voice servers, computers, that is, automated computing machinery, that provide speech recognition and speech synthesis. For further explanation, therefore, FIG. 2 sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a voice server (151) in speech-enabled web content searching using a multimodal browser according to embodiments of the present invention. The voice server (151) of FIG. 2 includes at least one computer processor (156) or ‘CPU’ as well as random access memory (168) (‘RAM’) which is connected through a high speed memory bus (166) and bus adapter (158) to processor (156) and to other components of the voice server (151). [0082] The exemplary voice server (151) of FIG. 2 is included in a system that is configured for speech-enabled web content searching using a multimodal browser according to embodiments of the present invention. Speech-enabled web content searching using a multimodal browser according to embodiments of the present invention includes: rendering, by the multimodal browser, web content; searching, by the multimodal browser, the web content for a search phrase, including yielding a matched search result, the search phrase specified by a first voice utterance received from a user and a search grammar; and performing, by the multimodal browser, an action in dependence upon the matched search result, the action specified by a second voice utterance received from the user and an action grammar. [0083] Stored in RAM (168) is a voice server application (188), a module of computer program instructions capable of operating a voice server in a system that is configured for speech-enabled web content searching using a multimodal browser according to embodiments of the present invention. Voice server application (188) provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning speech recognition results, including text representing recognized speech, text for use as variable values in dialogs, and text as string representations of scripts for semantic interpretation. Voice server application (188) also includes computer program instructions that provide text-to-speech (‘TTS’) conversion for voice prompts and voice responses to user input in multimodal browsers that provide an execution environment for web pages implemented using, for example, HTML, XHTML, or X+V. Voice server application (188) may be implemented as a web server, implemented in Java, C++, or another language, that supports speech-enabled web content searching using a multimodal browser according embodiments of the present invention. [0084] The voice server (151) in this example includes a speech engine (153). The speech engine is a functional module, typically a software module, although it may include specialized hardware also, that does the work of recognizing and synthesizing human speech. The speech engine (153) includes an automated speech recognition (‘ASR’) engine (150) for speech recognition and a text-to-speech (‘TTS’) engine (194) for generating speech. The speech engine (153) also includes a grammar (104), a lexicon (106), and a language-specific acoustic model (108). The language-specific acoustic model (108) is a data structure, a table or database, for example, that associates Speech Feature Vectors with phonemes representing, to the extent that it is practically feasible to do so, all pronunciations of all the words in a human language. The lexicon (106) is an association of words in text form with phonemes representing pronunciations of each word; the lexicon effectively identifies words that are capable of recognition by an ASR engine. Also stored in RAM (168) is a Text To Speech (‘TTS’) Engine (194), a module of computer program instructions that accepts text as input and returns the same text in the form of digitally encoded speech, for use in providing speech as prompts for and responses to users of multimodal systems. [0085] The voice server application (188) in this example is configured to receive, from a multimodal client located remotely across a network from the voice server, digitized speech for recognition from a user and pass the speech along to the ASR engine (150) for recognition. ASR engine (150) is a module of computer program instructions, also stored in RAM in this example. In carrying out speech-enabled web content searching using a multimodal browser, the ASR engine (150) receives speech for recognition in the form of at least one digitized word and uses frequency components of the digitized word to derive a Speech Feature Vector (‘SFV’). An SFV may be defined, for example, by the first twelve or thirteen Fourier or frequency domain components of a sample of digitized speech. The ASR engine can use the SFV to infer phonemes for the word from the language-specific acoustic model (108). The ASR engine then uses the phonemes to find the word in the lexicon (106). [0086] In the example of FIG. 2, the voice server application (188) passes the speech along to the ASR engine (150) for recognition through a VoiceXML interpreter (192). The VoiceXML interpreter (192) is a software module of computer program instructions that accepts voice dialogs (522) from a multimodal browser running remotely on a multimodal device. The dialogs (522) include dialog instructions, typically implemented in the form of a VoiceXML <form> element. The voice dialog instructions include one or more grammars, data input elements, event handlers, and so on, that advise the VoiceXML interpreter (192) how to administer voice input from a user and voice prompts and responses to be presented to a user. The VoiceXML interpreter (192) administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm (‘FIA’) (193). [0087] Also stored in RAM (168) is an operating system (154). Operating systems useful in voice servers according to embodiments of the present invention include UNIX™, Linux™, Microsoft NT™, IBM's AIX™, IBM's i5/OS™, and others as will occur to those of skill in the art. Operating system (154), voice server application (188), VoiceXML interpreter (192), speech engine (153), including ASR engine (150), and TTS engine (194) in the example of FIG. 2 are shown in RAM (168), but many components of such software typically are stored in non-volatile memory also, for example, on a disk drive (170). [0088] Voice server (151) of FIG. 2 includes bus adapter (158), a computer hardware component that contains drive electronics for high speed buses, the front side bus (162), the video bus (164), and the memory bus (166), as well as drive electronics for the slower expansion bus (160). Examples of bus adapters useful in voice servers according to embodiments of the present invention include the Intel Northbridge, the Intel Memory Controller Hub, the Intel Southbridge, and the Intel I/O Controller Hub. Examples of expansion buses useful in voice servers according to embodiments of the present invention include Industry Standard Architecture (‘ISA’) buses and Peripheral Component Interconnect (‘PCI’) buses. [0089] Voice server (151) of FIG. 2 includes disk drive adapter (172) coupled through expansion bus (160) and bus adapter (158) to processor (156) and other components of the voice server (151). Disk drive adapter (172) connects non-volatile data storage to the voice server (151) in the form of disk drive (170). Disk drive adapters useful in voice servers include Integrated Drive Electronics (‘IDE’) adapters, Small Computer System Interface (‘SCSI’) adapters, and others as will occur to those of skill in the art. In addition, non-volatile computer memory may be implemented for a voice server as an optical disk drive, electrically erasable programmable read-only memory (so-called ‘EEPROM’ or ‘Flash’ memory), RAM drives, and so on, as will occur to those of skill in the art. [0090] The example voice server of FIG. 2 includes one or more input/output (‘I/O’) adapters (178). I/O adapters in voice servers implement user-oriented input/output through, for example, software drivers and computer hardware for controlling output to display devices such as computer display screens, as well as user input from user input devices (181) such as keyboards and mice. The example voice server of FIG. 2 includes a video adapter (209), which is an example of an I/O adapter specially designed for graphic output to a display device (180) such as a display screen or computer monitor. Video adapter (209) is connected to processor (156) through a high speed video bus (164), bus adapter (158), and the front side bus (162), which is also a high speed bus. [0091] The exemplary voice server (151) of FIG. 2 includes a communications adapter (167) for data communications with other computers (182) and for data communications with a data communications network (100). Such data communications may be carried out serially through RS-232 connections, through external buses such as a Universal Serial Bus (‘USB’), through data communications data communications networks such as IP data communications networks, and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer, directly or through a data communications network. Examples of communications adapters useful for speech-enabled web content searching using a multimodal browser according to embodiments of the present invention include modems for wired dial-up communications, Ethernet (IEEE 802.3) adapters for wired data communications network communications, and 802.11 adapters for wireless data communications network communications. [0092] For further explanation, FIG. 3 sets forth a functional block diagram of exemplary apparatus for speech-enabled web content searching using a multimodal browser in a thin client architecture according to embodiments of the present invention. The example of FIG. 3 includes a multimodal device (152) and a voice server (151) connected for data communication by a VOIP connection (216) through a data communications network (100). A web page (195) operates in a multimodal browser (196) on the multimodal device (152), and a voice server application (188) operates on the voice server (151). The web page (195) contains web content for presentation to a user and may be implemented using HTML, XHTML, or X+V. [0093] The multimodal browser (196) of FIG. 3 includes a set of computer program instructions configured for speech-enabled web content searching according to embodiments of the present invention. The multimodal browser (196) of FIG. 3 may operate generally for speech-enabled web content searching according to embodiments of the present invention by: rendering, by the multimodal browser, web content; searching, by the multimodal browser, the web content for a search phrase, including yielding a matched search result, the search phrase specified by a first voice utterance received from a user and a search grammar; and performing, by the multimodal browser, an action in dependence upon the matched search result, the action specified by a second voice utterance received from the user and an action grammar. [0094] The multimodal device (152) of FIG. 3 supports multiple modes of interaction including a voice mode and one or more non-voice modes. The example multimodal device (152) of FIG. 3 also supports voice with a sound card (174), which is an example of an I/O adapter specially designed for accepting analog audio signals from a microphone (176) and converting the audio analog signals to digital form for further processing by a codec (183). The example multimodal device (152) of FIG. 3 may support non-voice modes of user interaction with keyboard input, mouse clicks, a graphical user interface (‘GUI’), and so on, as will occur to those of skill in the art. [0095] In addition to the multimodal sever application (188), the voice server (151) also has installed upon it a speech engine (153) with an ASR engine (150), a grammar (104), a lexicon (106), a language-specific acoustic model (108), and a TTS engine (194), as well as a Voice XML interpreter (192) that includes a form interpretation algorithm (193). VoiceXML interpreter (192) interprets and executes VoiceXML dialog (522) received from the multimodal browser (196) and provided to VoiceXML interpreter (192) through voice server application (188). VoiceXML input to VoiceXML interpreter (192) may originate from the multimodal browser operating on the multimodal device (152) for speech-enabled web content searching according to embodiments of the present invention. The VoiceXML interpreter (192) administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm (‘FIA’) (193). [0096] VOIP stands for ‘Voice Over Internet Protocol,’ a generic term for routing speech over an IP-based data communications network. The speech data flows over a general-purpose packet-switched data communications network, instead of traditional dedicated, circuit-switched voice transmission lines. Protocols used to carry voice signals over the IP data communications network are commonly referred to as ‘Voice over IP’ or ‘VOIP’ protocols. VOIP traffic may be deployed on any IP data communications network, including data communications networks lacking a connection to the rest of the Internet, for instance on a private building-wide local area data communications network or ‘LAN.’ [0097] Many protocols are used to effect VOIP. The two most popular types of VOIP are effected with the IETF's Session Initiation Protocol (‘SIP’) and the ITU's protocol known as ‘H.323.’ SIP clients use TCP and UDP port 5060 to connect to SIP servers. SIP itself is used to set up and tear down calls for speech transmission. VOIP with SIP then uses RTP for transmitting the actual encoded speech. Similarly, H.323 is an umbrella recommendation from the standards branch of the International Telecommunications Union that defines protocols to provide audio-visual communication sessions on any packet data communications network. [0098] The apparatus of FIG. 3 operates in a manner that is similar to the operation of the system of FIG. 2 described above. Multimodal browser (196) is a user-level, multimodal, client-side computer program that presents a voice interface to user (128), provides audio prompts and responses (314) and accepts input speech for recognition (315). Multimodal browser (196) provides a speech interface through which a user may provide oral speech for recognition through microphone (176) and have the speech digitized through an audio amplifier (185) and a coder/decoder (‘codec’) (183) of a sound card (174) and provide the digitized speech for recognition to ASR engine (150). The multimodal browser (196), through an API (316) and a voice services module (130), then packages the digitized speech in a recognition request message according to a VOIP protocol, and transmits the speech to voice server (151) through the VOIP connection (216) on the network (100). [0099] Voice server application (188) provides voice recognition services for multimodal devices by accepting dialog instructions, VoiceXML segments, and returning speech recognition results, including text representing recognized speech, text for use as variable values in dialogs, and output from execution of semantic interpretation scripts—as well as voice prompts. Voice server application (188) includes computer program instructions that provide text-to-speech (‘TTS’) conversion for voice prompts and voice responses to user input in multimodal browsers and that provide responses to HTTP requests from multimodal browsers running on multimodal devices. [0100] The voice server application (188) receives speech for recognition from a user and passes the speech through API calls to VoiceXML interpreter (192) which in turn uses an ASR engine (150) for speech recognition. The ASR engine receives digitized speech for recognition, uses frequency components of the digitized speech to derive an SFV, uses the SFV to infer phonemes for the word from the language-specific acoustic model (108), and uses the phonemes to find the speech in the lexicon (106). The ASR engine then compares speech found as words in the lexicon to words in a grammar (104) to determine whether words or phrases in speech are recognized by the ASR engine. [0101] In the example of FIG. 3, the multimodal browser (196) is operatively coupled to the ASR engine (150) through the VoiceXML interpreter (192). In this example, the operative coupling to the ASR engine (150) through a VoiceXML interpreter (192) is implemented with a VOIP connection (216) through a voice services module (130). The voice services module is a thin layer of functionality, a module of computer program instructions, that presents an API (316) for use by an application level program in providing dialogs (522) and speech for recognition to a VoiceXML interpreter and receiving in response voice prompts and other responses, including action identifiers according to embodiments of the present invention. The VoiceXML interpreter (192), in turn, utilizes the speech engine (153) for speech recognition and generation services. [0102] In the example of FIG. 3, the voice services module (130) provides data communications services through the VOIP connection and the voice server application (188) between the multimodal device (152) and the VoiceXML interpreter (192). The API (316) is the same API presented to applications by a VoiceXML interpreter when the VoiceXML interpreter is installed on the multimodal device in a thick client architecture. So from the point of view of an application calling the API (316), the application is calling the VoiceXML interpreter directly. The data communications functions of the voice services module (130) are transparent to applications that call the API (316). At the application level, calls to the API (316) may be issued from the multimodal browser (196), which provides an execution environment for the web page (195) containing web content. [0103] Speech-enabled web content searching using a multimodal browser according to embodiments of the present invention in thick client architectures is generally implemented with multimodal devices, that is, automated computing machinery or computers. In the system of FIG. 1, for example, all the multimodal devices (152) are implemented to some extent at least as computers. For further explanation, therefore, FIG. 4 sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a multimodal device (152) in speech-enabled web content searching using a multimodal browser according to embodiments of the present invention. In a multimodal device implementing a thick client architecture as illustrated in FIG. 4, the multimodal device (152) has no connection to a remote voice server containing a VoiceXML interpreter and a speech engine. Rather, all the components needed for speech synthesis and voice recognition in speech-enabled web content searching using a multimodal browser according to embodiments of the present invention are installed or embedded in the multimodal device itself. [0104] The example multimodal device (152) of FIG. 4 includes several components that are structured and operate similarly as do parallel components of the voice server, having the same drawing reference numbers, as described above with reference to FIG. 2: at least one computer processor (156), front-side bus (162), RAM (168), high speed memory bus (166), bus adapter (158), video adapter (209), video bus (164), expansion bus (160), communications adapter (167), I/O adapter (178), disk drive adapter (172), an operating system (154), a VoiceXML Interpreter (192), a speech engine (153), and so on. As in the system of FIG. 2, the speech engine in the multimodal device of FIG. 4 includes an ASR engine (150), a grammar (104), a lexicon (106), a language-dependent acoustic model (108), and a TTS engine (194). The VoiceXML interpreter (192) administers dialogs (522) by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm (‘FIA’) (193). [0105] The speech engine (153) in this kind of embodiment, a thick client architecture, often is implemented as an embedded module in a small form factor device such as a handheld device, a mobile phone, PDA, and the like. An example of an embedded speech engine useful for speech-enabled web content searching using a multimodal browser according to embodiments of the present invention is IBM's Embedded ViaVoice Enterprise. The example multimodal device of FIG. 4 also includes a sound card (174), which is an example of an I/O adapter specially designed for accepting analog audio signals from a microphone (176) and converting the audio analog signals to digital form for further processing by a codec (183). The sound card (174) is connected to processor (156) through expansion bus (160), bus adapter (158), and front side bus (162). [0106] Also stored in RAM (168) in this example are a web page (195) and a multimodal browser (196). The web page (195) contains web content implemented according to HTML, XHTML, or X+V. The multimodal browser (196) provides an execution environment for the web page (195). In the example of FIG. 4, the multimodal browser (196) includes a set of computer program instructions configured for speech-enabled web content searching according to embodiments of the present invention. The multimodal browser (196) of FIG. 4 may operate generally for speech-enabled web content searching according to embodiments of the present invention by: rendering, by the multimodal browser, web content; searching, by the multimodal browser, the web content for a search phrase, including yielding a matched search result, the search phrase specified by a first voice utterance received from a user and a search grammar; and performing, by the multimodal browser, an action in dependence upon the matched search result, the action specified by a second voice utterance received from the user and an action grammar. [0107] The multimodal browser (196) implements speech recognition by accepting speech utterances for recognition from a user and sending the utterance for recognition through a VoiceXML interpreter API (316) to the ASR engine (150). The multimodal browser (196) implements speech synthesis generally by sending words to be used as prompts for a user to the TTS engine (194). As an example of thick client architecture, the multimodal browser (196) in this example does not send speech for recognition across a network to a voice server for recognition, and the multimodal browser (196) in this example does not receive synthesized speech, TTS prompts and responses, across a network from a voice server. All grammar processing, voice recognition, and text to speech conversion in this example is performed in an embedded fashion in the multimodal device (152) itself. [0108] More particularly, multimodal browser (196) in this example is a user-level, multimodal, client-side computer program that provides a speech interface through which a user may provide oral speech for recognition through microphone (176), have the speech digitized through an audio amplifier (185) and a coder/decoder (‘codec’) (183) of a sound card (174) and provide the digitized speech for recognition to ASR engine (150). The multimodal browser (196) may pass VoiceXML grammars and digitized speech by calls through a VoiceXML interpreter API directly to an embedded VoiceXML interpreter (192) for processing. The embedded VoiceXML interpreter (192) may in turn issue requests for speech recognition through API calls directly to the embedded ASR engine (150). The embedded VoiceXML interpreter (192) may then issue requests to the action classifier (132) to determine an action identifier in dependence upon the recognized result provided by the ASR engine (150). The multimodal browser (196) also can provide speech synthesis, TTS conversion, by API calls to the embedded TTS engine (194) for voice prompts and voice responses to user input. [0109] In the example of FIG. 4, the multimodal browser (196) is operatively coupled to the ASR engine (150) through a VoiceXML interpreter (192). In this example, the operative coupling through the VoiceXML interpreter is implemented using a VoiceXML interpreter API (316). The VoiceXML interpreter API (316) is a module of computer program instructions for use by an application level program in providing dialog instructions, speech for recognition, and other input to a VoiceXML interpreter and receiving in response voice prompts and other responses. The VoiceXML interpreter API presents the same application interface as is presented by the API of the voice service module (130 on FIG. 3) in a thin client architecture. At the application level, calls to the VoiceXML interpreter API may be issued from the multimodal browser (196), which provides an execution environment for the web page (195) implemented using HTML, XHTML, or X+V. The VoiceXML interpreter (192), in turn, utilizes the speech engine (153) for speech recognition and generation services. [0110] In the example of FIG. 4, the multimodal browser (196) operates on a multimodal device (152) that contains its own VoiceXML interpreter (192) and its own speech engine (153) with no network or VOIP connection to a remote voice server containing a remote VoiceXML interpreter or a remote speech engine, is an example of a so-called ‘thick client architecture,’ so-called because all of the functionality for processing voice mode interactions between a user and the multimodal browser—as well as all or most of the functionality for speech-enabled web content searching using a multimodal browser according to embodiments of the present invention—is implemented on the multimodal device itself. [0111] For further explanation, FIG. 5 sets forth a flow chart illustrating an exemplary method of speech-enabled web content searching using a multimodal browser (196) according to embodiments of the present invention. The multimodal browser (196) of FIG. 5 provides an execution environment for web pages containing web content. The multimodal browser (196) operates on a multimodal device supporting multiple modes of interaction including a voice mode and one or more non-voice modes of user interaction with the multimodal application. The voice mode may be implemented in this example with audio output through a speaker and audio input through a microphone. Non-voice modes may be implemented by user input devices such as, for example, a keyboard and a mouse and by user output devices such as, for example, a display screen of the multimodal device. [0112] The method of FIG. 5 includes rendering (500), by the multimodal browser (196), web content (504). As mentioned above, web content is the textual, visual or aural content of the web that is presented to a user along with metadata describing such content. Web content may include, among other things, text, images, sounds, videos, and animations. Rendering (500), by the multimodal browser (196), web content (504) according to the method of FIG. 5 may be carried out by displaying the web content on a display screen when the web content is implemented as visual content such as, for example, textual content, graphical content, animations, and so on. Rendering (500), by the multimodal browser (196), web content (504) according to the method of FIG. 5 may be carried out by playing the web content through a speaker when the web content is implemented as aural content. In the example of FIG. 5, the web content (504) is implemented as textual content. The multimodal browser (196) of FIG. 5 renders the web content (504) on a graphical user interface (‘GUI’) (502) for display on the display screen of the multimodal device. [0113] In the example of FIG. 5, the multimodal browser (196) is operatively coupled to an ASR engine, which may be implemented through a VoiceXML interpreter. The operative coupling provides a data communications path from the multimodal browser (196) to the ASR engine for grammars, speech for recognition, and other input. The operative coupling also provides a data communications path from the ASR engine to the multimodal browser (196) for recognized speech, semantic interpretation results, and other results. The operative coupling may be effected with a VoiceXML interpreter (192 on FIG. 4) when the multimodal browser is implemented in a thick client architecture. When the multimodal browser is implemented in a thin client architecture, the operative coupling may include a voice services module (130 on FIG. 3), a VOIP connection (216 on FIG. 3), and a VoiceXML interpreter (192 on FIG. 3). [0114] Speech-enabled web content searching using a multimodal browser (196) according to the method of FIG. 5 is implemented with one or more grammars in an ASR engine. A grammar communicates to the ASR engine the words and sequences of words that currently may be recognized. A grammar typically includes grammar rules, both static and dynamic, that advise an ASR engine which words and word sequences presently can be recognized. Through the operative coupling between the multimodal browser (196) and the ASR engine, the multimodal browser (196) may provide the grammars to the ASR engine. The multimodal browser (196) may specify the grammars using the VoiceXML <grammar> elements as follows: <grammar src=“grammar.le”/> [0116] The source attribute ‘src’ specifics the URI of the definition of the exemplary grammar. Although the above example illustrates how a grammar may be referenced externally, a grammar's definition may also be expressed in-line in the <grammar> element. [0117] The method of FIG. 5 includes searching (506), by the multimodal browser (196), the web content (504) for a search phrase, including yielding a matched search result (508), the search phrase specified by a first voice utterance received from a user and a search grammar. A matched search result (508) in the example of FIG. 5 is a portion of the web content (504) that matches the search phrase specified by a first voice utterance received from a user and a search grammar. Searching (506), by the multimodal browser (196), the web content (504) for a search phrase, including yielding a matched search result (508) according to the method of FIG. 5 may be carried out by creating the search grammar in dependence upon the web content (504), receiving the first voice utterance from a user, determining, using the ASR engine, the search phrase in dependence upon the first voice utterance and the search grammar, and matching the search phrase to at least one portion of the web content (504), yielding a matched search result (508) as described in more detail below with reference to FIG. 6. In the example of FIG. 5, the matched search result (508) is the word ‘interaction’ in the exemplary web content (504). The word ‘interaction’ is specified as the matched search result (508) by the first voice utterance received from a user and the search grammar. [0118] The method of FIG. 5 also includes augmenting (510), by the multimodal browser (196), the matched search result (508) with additional web content (514). The additional web content (514) of FIG. 5 is web content that is used to supplement the matched search result (508). In the example of FIG. 5, the additional web content (514) includes metadata used to turn the text ‘interaction’ into a hyperlink to the definition of ‘interaction’ provided by TheFreeDictionary. The additional web content (514) of FIG. 5 also includes a superscripted numeral ‘1’ adjacent to the ‘interaction’ hyperlink along with metadata used to highlight the ‘interaction’ hyperlink and the superscripted numeral ‘1’ Augmenting (510), by the multimodal browser (196), the matched search result (508) with additional web content (514) according to the method of FIG. 5 may be carried out by rendering the additional web content (514) along with the web content (504). In FIG. 5, for example, the additional web content (514) is rendered along with web content (504) using GUI (512). [0119] The method of FIG. 5 includes performing (516), by the multimodal browser, an action in dependence upon the matched search result (508), the action specified by a second voice utterance received from the user and an action grammar. An action is any action that may be performed using the matched search result (508). For example, the action may include creating a map using the matched search result (508) when the matched search result is a location, looking up more information regarding the matched search result (508) in a dictionary, encyclopedia, or other reference source available through the Internet, performing a search for the matched search result (508) through a search portal. In the example of FIG. 5, the action performed is displaying the definition of the matched search result ‘interaction’ provided by TheFreeDictionary using GUI (518). Performing (516), by the multimodal browser, an action in dependence upon the matched search result (508) according to the method of FIG. 5 may be carried out by creating the action grammar in dependence upon the matched search result (508), receiving the second voice utterance from the user, determining, using the ASR engine, an action identifier in dependence upon the second voice utterance and the action grammar, and performing the specified action in dependence upon the action identifier as described in more detail below with reference to FIG. 6. [0120] For further explanation, FIG. 6 sets forth a flow chart illustrating a further exemplary method of speech-enabled web content searching using a multimodal browser (196) according to embodiments of the present invention. The multimodal browser (196) of FIG. 6 provides an execution environment for web pages containing web content. The multimodal browser (196) operates on a multimodal device supporting multiple modes of interaction including a voice mode and one or more non-voice modes of user interaction with the multimodal application. The voice mode may be implemented in this example with audio output through a speaker and audio input through a microphone. Non-voice modes may be implemented by user input devices such as, for example, a keyboard and a mouse and by user output devices such as, for example, a display screen of the multimodal device. [0121] The method of FIG. 6 is similar to the method of FIG. 5. That is, the method of FIG. 6 includes: rendering (500), by the multimodal browser, web content (504); searching (506), by the multimodal browser, the web content (504) for a search phrase, including yielding a matched search result (508), the search phrase specified by a first voice utterance received from a user and a search grammar; augmenting (510), by the multimodal browser, the matched search result (508) with additional web content (514); and performing (516), by the multimodal browser, an action in dependence upon the matched search result (508), the action specified by a second voice utterance received from the user and an action grammar. In the example of FIG. 6, the multimodal browser (196) is operatively coupled to an ASR engine. Speech-enabled web content searching using a multimodal browser (196) according to embodiments of the present invention is implemented with one or more grammars in an ASR engine. [0122] Searching (506), by the multimodal browser (196), the web content (504) for a search phrase, including yielding a matched search result (508) according to the method of FIG. 6 includes creating (600) the search grammar (602) in dependence upon the web content (504). The search grammar (602) of FIG. 6 communicates to the ASR engine the words and sequences of words that currently comprise or describe the web content (504). The multimodal browser (196) may create (600) the search grammar (602) in dependence upon the web content (504) according to the method of FIG. 6 by parsing out individual words from the web content (504), concatenating the words from the web content (504) into a single alternative list to form a grammar rule, and adding the grammar rule to a grammar template. For further explanation, consider the exemplary web content illustrated in FIG. 5 at reference numeral 504. Based on such exemplary web content, the multimodal browser (196) may create (600) the following exemplary search grammar expressed in JSGF: [0000] #JSGF V1.0 iso-8859-1; grammar textsearch; public <textsearch> = <command> <string>{$.vSearchField = $string}; <command> = find | search [for]|show me; <string> = <words>+; <words> = Multimodal | As | devices| become | smaller | modes | of |       interaction | other | than | keyboard | and | stylus | are | a |       necessity...; [0123] In the exemplary search grammar above, the grammar rule <words> is formed using an alternative list of all the words comprising the exemplary web content illustrated in FIG. 5 at reference numeral 504. The grammar rule <words> is added to a grammar template used to recognize phrases such as: “search for devices” “show me keyboard and stylus” “find interaction” [0127] In the example method of FIG. 6, searching (506), by the multimodal browser (196), the web content (504) for a search phrase, including yielding a matched search result (508) also includes receiving (604) the first voice utterance (606) from a user. The first voice utterance (606) of FIG. 6 represents digitized human speech provided to the multimodal browser (196) by a user of a multimodal device. As mentioned above, the multimodal browser (196) may receive (604) the first voice utterance (606) from a user according to the method of FIG. 6 through a microphone and encode the voice utterance in a suitable format for storage and transmission using any CODEC as will occur to those of skill in the art. In the method of FIG. 6, the multimodal browser (196) may activate receipt of the first voice utterance (606) from a user by executing a VoiceXML <form> element through a VoiceXML interpreter such as the following exemplary VoiceXML <form> element: [0000] <vxml:form id=“search”>    <vxml:grammar src=    “http://www.example.com/search.grammar.jsp”>    <vxml:field name=“vSearchField”>       <vxml:filled>          <vxml:clear namelist=“vSearchField”/>          <vxml:throw event=“do.search”/>       </vxml:filled>    </vxml:field> </vxml:form> [0128] The multimodal browser (196) may provide the exemplary VoiceXML <form> element to a VoiceXML interpreter upon rendering (500) the web content (504) to the user so as to receive any utterance provided by the user in response to the rendered web content. The exemplary VoiceXML <form> element above activates the multimodal browser (196) to receive (604) the first voice utterance (606) from a user because the VoiceXML <form> element is a dialog for presenting information and collecting data. The exemplary VoiceXML <form> element above specifies that data is to be collected in the VoiceXML field identified as “vSearchField” using a grammar specified in the VoiceXML <grammar> element. If data is successfully collected, or ‘filled,’ in the “vSearchField” field, then the event “do.search” is triggered, or ‘thrown.’ The event “do.search” specifies that the multimodal browser (196) is to perform a search of the web content (504) based on the data collected in the “vSearchField” field. The manner in which the multimodal browser (196) collects data into the “vSearchField” field and the manner in which the multimodal browser (196) search the web content are discussed in more detail below. [0129] Searching (506), by the multimodal browser (196), the web content (504) for a search phrase, including yielding a matched search result (508) according to the method of FIG. 6 includes determining (608), using the ASR engine, the search phrase (610) in dependence upon the first voice utterance (606) and the search grammar (602). The search phrase (610) is word or set of words specified by the first voice utterance (606) received from a user and the search grammar (602). The multimodal browser (196) may determine (608) the search phrase in dependence upon the first voice utterance (606) and the search grammar (602) using the ASR engine according to the method of FIG. 6 by passing the first voice utterance (606) and the search grammar (602) to the ASR engine for speech recognition, receiving the recognition results from the ASR engine, and storing the recognition results in an ECMAScript data structure such as, for example, the application variable ‘application.lastresult$’ or some other field variable for a field specified in the VoiceXML <form> element generated by the multimodal browser (196) to pass the first voice utterance (606) and the search grammar (602) to the ASR engine. The multimodal browser (196) may identify the recognition results stored in an ECMAScript data structure as the search phrase (610). [0130] In a thin client architecture, the multimodal browser (196) may provide the first voice utterance (606) and the search grammar (602) to the ASR engine as part of a call by the multimodal browser (196) to a voice services module (130 on FIG. 3) to provide voice recognition services. The voice services module, then in turn, passes the first voice utterance (606) and the search grammar (602) to the ASR engine through a VOIP connection (216 on FIG. 3) and a voice server application (188 on FIG. 3) and a VoiceXML interpreter (192 on FIG. 3). In a thick client architecture, multimodal browser (196) may provide the first voice utterance (606) and the search grammar (602) to the ASR engine as part of a call directly to an embedded VoiceXML interpreter (192 on FIG. 4) by the multimodal browser (196) through an API exposed by the VoiceXML interpreter (192 on FIG. 4). The VoiceXML interpreter, then in turn, passes the first voice utterance (606) and the search grammar (602) to the ASR engine as a part of a call to an API of the ASR engine. [0131] As mentioned above, the multimodal browser (196) of FIG. 5 may store the recognition results from the ASR engine in an ECMAScript data structure such as, for example, the ‘application.lastresult$’ array. ECMAScript data structures represent objects in the Document Object Model (‘DOM’) at the scripting level in a web page. The DOM is a model that represents the data contained in web page in a form more readily processed by a browser and its supporting applications such as a VoiceXML interpreter. The DOM for a web page is created by the multimodal browser (196) upon loading a web page. The ‘application.lastresult$’ array holds information about the last recognition generated by an ASR engine for the multimodal browser (196). The ‘application.lastresult$’ is an array of elements where each element, application.lastresult$[i], represents a possible result through the following shadow variables: application.lastresult$[i].confidence, which specifies the confidence level for this recognition result. A value of 0.0 indicates minimum confidence, and a value of 1.0 indicates maximum confidence. application.lastresult$[i].utterance, which is the raw string of words that compose this recognition result. The exact tokenization and spelling is platform-specific (e.g. “five hundred thirty” or “5 hundred 30” or even “530”). application.lastresult$[i].inputmode, which specifies the mode in which the user provided the voice utterance. Typically, the value is voice for a voice utterance. application.lastresult$[i].interpretation, which is an ECMAScript variable containing output from ECMAScript post-processing script typically used to reformat the value contained in the ‘utterance’ shadow variable. [0136] Using the ‘application.lastresult$’ variable above, the multimodal browser (196) may identify the recognition results stored in ‘application.lastresult$.utterance’ as the search phrase (610). When the multimodal browser (196) stores the recognition results in an ECMAScript field variable for a field specified by the multimodal browser (196), the recognition results may be stored in field variable array using shadow variables similar to the application variable ‘application.lastresult$.’ For example, a field variable array may represent a possible recognition result through the following shadow variables: name$[i].confidence, name$[i].utterance, name$[i].inputmode, and name$[i].interpretation, where ‘name$’ is a placeholder for the field identifier for a field specified by multimodal browser (196) to store the recognition results. Using the exemplary VoiceXML <form> element above, the multimodal browser (196) may identify the recognition results stored in ‘vSearchField$.utterance’ as the search phrase (610). [0141] In the example method of FIG. 6, searching (506), by the multimodal browser (196), the web content (504) for a search phrase, including yielding a matched search result (508) also includes matching (612) the search phrase (610) to at least one portion of the web content (504), yielding a matched search result (508). Matching (612) the search phrase (610) to at least one portion of the web content (504), yielding a matched search result (508), according to the method of FIG. 6 may be carried out by identifying a node of a DOM representing the web content that contains the search phrase (610). Identifying a node of a DOM representing the web content that contains the search phrase (610) may be carried out by calling an ECMAScript function that traverses through all the nodes of the DOM, parsing each node to determine whether the node contains the search phrase (610), and returning the identifiers for nodes that contain the search phrase (610). The matched search result (508) may be identified by the multimodal browser (196) as the text in a DOM node that matches the search phrase (610). Consider, for example, the following pseudocode of the exemplary ECMAScript function: [0000] function findText(text, nodes, results) {    for (i in nodes)    {       if (typeof (nodes[i][‘childNodes’]) != “undefined”)       {          findText(text, nodes.childNodes, results);       }       if (nodes.nodeType == node.TEXT_NODE)          if (nodes[i].nodeValue.indexOf(text) != −1)             results.push(nodes[i]);    } }. [0142] The exemplary ECMAScript function ‘findText’ above receives parameters ‘text,’ ‘nodes,’ and ‘results.’ The ‘text’ parameter stores the search phrase (610). The ‘nodes’ parameter that stores the address of a list of DOM nodes that contains the web content (504). The ‘results’ parameter stores a pointer to a list of DOM nodes that represent the web content (504) that contains the search phrase (610). The ‘findText’ function above recursively traverses through each node of the DOM that represents the web content (504), determines whether each node contains the search phrase (610), and stores the identifiers for each node that contains the search phrase (610) in the ‘results’ list. [0143] The multimodal browser (196) may match the search phrase (610) to at least one portion of the web content (504) using the exemplary ‘findText’ function above in a ECMAScript script that executes after the multimodal browser (196) determines (608) the search phrase (610). For further explanation, consider again that the exemplary VoiceXML <form> element above used to receive (604) the first voice utterance (606) from a user and to determine (608) the search phrase (610). The exemplary VoiceXML <form> element throws a ‘do.search’ event if the multimodal browser (196) successfully determines (608) the search phrase (610) using the search grammar (602). In response to a ‘do.search’ event being thrown, the following exemplary ECMAScript script may be run to execute the ‘findText’ function: [0000] <script type=“text/javascript” declare=“declare” ev:event= “do.search” ev:observer=“body”>    var searchResults = new Array;    findText(application.lastresult$, document.body.childNodes,       searchResults); </script>. [0144] The exemplary ECMAScript script above is executed by the multimodal browser (196) when the ‘do.search’ event is thrown. The ‘findText’ function receives the search phrase (610) through the ‘application.lastresult$’ variable. The ‘document.body.childNodes’ variable represents a list of DOM nodes through which the ‘findText’ function traverses to identify nodes that contain the search phrase (610). The ‘searchResults’ variable is an array used to store the list of nodes that contain the search phrase (610). Each node listed in the ‘searchResults’ array, therefore, contains the matched search result (508). [0145] In the method of FIG. 6, augmenting (510), by the multimodal browser, the matched search result (508) with additional web content (514) may be carried out by inserting the additional web content (514) into a node of a Document Object Model representing the web content (504) that contains the matched search result (508). The multimodal browser (196) may insert the additional web content (514) into a node of a DOM representing the web content (504) that contains the matched search result (508) by calling an ECMAScript function that parses the node to locate the matched search result (508) within the DOM node and appends the additional web content (514) to the matched search result (508) or inserts the additional web content (514) into the matched search result (508). Consider, for example, the following pseudocode of the exemplary ECMAScript function: [0000] function augmentContent(text, results) {    for (i in results)    {       var element = results[i];       start = element.nodeValue.indexOf(text);       var newText = element.nodeValue.subStr(0, start−1);       newText = newText + “<a href=\“http://www.tfd.com/” +          text + “\” style=\“background-color: yellow\” +          “class=\“vclick\” >”;       newText = newText + text + “</a>”;       newText = newText +          “<b style=\“background-color: pink;” +          “vertical-align: super\”>” + i + “</b>”;       element.nodeValue = newText;    } }. [0146] The exemplary ECMAScript function ‘augmentContent’ above receives parameters ‘text’ and ‘results.’ The ‘text’ parameter stores the search phrase (610). The ‘results’ parameter stores a pointer to a list of DOM nodes that represent the web content (504) that contains the search phrase (610). The ‘augmentContent’ function above parses the nodes in the ‘results’ list and appends exemplary additional web content to the matched search result (508), which is the text contained in a node of the ‘results’ list that matches the search phrase (610). The exemplary additional web content contained in the ‘augmentContent’ function above turns the matched search result (508) into a hyperlink to the definition of the matched search result (508) provided by TheFreeDictionary. The exemplary additional web content above also appends a superscripted numeral ‘1’ to the matched search result hyperlink along with metadata used to highlight the matched search result hyperlink and the superscripted numeral ‘1.’ When rendered by the multimodal browser (196), the exemplary additional content may resemble the additional web content on FIG. 5 at reference numeral 514. The exemplary ‘augmentContent’ function above operates to generate the additional web content illustrated in FIG. 5 at reference numeral 514. [0147] The multimodal browser (196) of FIG. 6 may augment (510) the matched search result (508) using the exemplary ‘augmentContent’ function above in a ECMAScript script that executes after the multimodal browser (196) matches the search phrase (610) to at least one portion of the web content (504) using the exemplary ‘findText.’ For further explanation, consider the following exemplary ECMAScript script may be run to execute the ‘augmentContent’ function: [0000] <script type=“text/javascript” declare=“declare” ev:event= “do.search” ev:observer=“body”>    var searchResults = new Array;    findText(application.lastresult$, document.body.childNodes,       searchResults);    augmentContent(application.lastresult$, searchResults); </script>. [0148] The exemplary ECMAScript script above is executed by the multimodal browser (196) when the ‘do.search’ event is thrown. After executing the ‘findText’ function as described above, the multimodal browser (196) executes the ‘augmentContent’ function to parse the nodes in the ‘searchResults’ list and append additional web content to the matched search result (508) contained in the parsed nodes. [0149] In the method of FIG. 6, performing (516), by the multimodal browser (196), an action in dependence upon the matched search result (508) includes creating (614) an action grammar (616) in dependence upon the matched search result (508). The action grammar (616) of FIG. 6 communicates to the ASR engine the words and sequences of words used by a user to perform an action based on the matched search result (508). The multimodal browser (196) may create (614) an action grammar (616) in dependence upon the matched search result (508) according to the method of FIG. 6 by adding the matched search result (508) to a grammar rule in a grammar template. For further explanation, consider an exemplary matched search result of ‘interaction.’ Based on the exemplary matched search result ‘interaction,’ the multimodal browser (196) may create (614) the following exemplary action grammar expressed in JSGF: [0000] <vxml:grammar>    <![CDATA[       #JSGF V1.0;       grammar search-action;       public <search-action> = <click> | <map> | <google>;       <click> = click [on][link|button] (<word> | <number>) {          $=“click.” + $number; };       <map> = map <word> {$=“map.” + $word};       <google> = google <word> {$=“google.” + $word};       <word> = interaction;    ]]> </vxml:grammar> [0150] The exemplary action grammar above, the exemplary grammar rule <word> is formed from matched search result ‘interaction’ and added to a grammar template used to recognize phrases such as: “click interaction” “google interaction” “click on link interaction” “click button interaction” [0155] The multimodal browser (196) of FIG. 6 may create (614) an action grammar (616) according to the method of FIG. 6 by calling an ECMAScript function in an ECMAScript script. The ECMAScript script may be the same script used by the multimodal browser (196) to search (506) the web content (504) for a search phrase (610) and augment (510) the matched search result (508) with additional web content (514). For further explanation, consider the following exemplary ECMAScript script: [0000] <script type=“text/javascript” declare=“declare” ev:event= “do.search” ev:observer=“body”>    var searchResults = new Array;    findText(application.lastresult$, document.body.childNodes,       searchResults);    augmentContent(application.lastresult$, searchResults);    createActionGrammar(application.lastresult$, searchResults); </script>. [0156] The exemplary ECMAScript script above is executed by the multimodal browser (196) when the ‘do.search’ event is thrown. After executing the ‘findText’ function and the ‘augmentContent’ function as described above, the multimodal browser (196) executes the ‘createActionGrammar’ function, which creates an action grammar by adding the matched search result (508) to a grammar rule in a grammar template. [0157] Performing (516), by the multimodal browser (196), an action in dependence upon the matched search result (508) according to the method of FIG. 6 also includes receiving (618) the second voice utterance (620) from the user. The second voice utterance (620) of FIG. 6 represents digitized human speech provided to the multimodal browser (196) by a user of a multimodal device. The multimodal browser (196) may receive (618) the second voice utterance (620) from a user according to the method of FIG. 6 through a microphone and encode the voice utterance in a suitable format for storage and transmission using any CODEC as will occur to those of skill in the art. [0158] In the method of FIG. 6, performing (516), by the multimodal browser (196), an action in dependence upon the matched search result (508) includes determining (622), using the ASR engine, an action identifier (624) in dependence upon the second voice utterance (620) and the action grammar (616). The action identifier (624) specifies the action to be performed by the multimodal browser (196). The multimodal browser (196) may determine (622) the action identifier (624) using an ASR engine according to the method of FIG. 6 by passing the second voice utterance (620) and the action grammar (616) to the ASR engine for speech recognition, receiving the recognition results from the ASR engine, and determining the action identifier (624) based on the recognized results. The multimodal browser (196) may determine the action identifier (624) based on the recognized results using semantic interpretation scripts embedded into the action grammar. In the exemplary action grammar above, for example, semantic interpretation scripts are used to produce one of the following exemplary action identifiers based on the recognition result received from the ASR engine: ‘click.1,’ which specifies activating a hyperlink having the superscript ‘1’; ‘map.interaction,’ which specifies mapping the term ‘interaction’ using Yahoo!®; ‘google.interaction,’ which specifies obtaining search results for the term ‘interaction’ using Google™. [0162] The semantic interpretation scripts of the exemplary action grammar above store one of these exemplary action identifiers in the application variable: application.lastresult$.interpretation.search-action [0164] Performing (516), by the multimodal browser (196), an action in dependence upon the matched search result (508) according to the method of FIG. 6 includes performing (626) the specified action in dependence upon the action identifier (624). The multimodal browser (196) may perform (626) the specified action in dependence upon the action identifier (624) according to the method of FIG. 6 by triggering a VoiceXML event after determining (622) an action identifier (624) and executing a set of instructions that performs one of several actions based on the action identifier (624). The multimodal browser (196) may trigger a VoiceXML event after determining (622) an action identifier (624) by placing the action grammar (616) in a VoiceXML <link> element such as, for example, the following VoiceXML <link> element: [0000] <vxml:link eventexpr= “application.lastresult$.interpretation.search-action”>   <vxml:grammar>     <![CDATA[       #JSGF V1.0;       grammar search-action-final;       public <search-action-final> = <action>         {$.search-action = $action;}       <action> = <click> | <map> | <google>;       <click> = click [on][link|button] (<word> | <number>)         { $=“click.” + $number; };       <map> = map <word> {$=“map.” + $word};       <google> = google <word> {$=“google.” + $word};       <word> = interaction;     ]]>   </vxml:grammar> </vxml:link> [0165] The exemplary VoiceXML <link> element above throws the event specified in ‘eventexpr’ when the action grammar is matched, thereby determining an action identifier (624) using the semantic interpretation scripts embedded in the grammar. The action identifier (624) is stored in the ‘interpretation.search-action’ shadow variable for the ‘application.lastresult$’ variable. [0166] The multimodal browser (196) may execute a set of instructions that performs one of several actions based on the action identifier (624) by placing the set of instructions in a VoiceXML <catch> element that is processed when the VoiceXML event is triggered. Consider the following VoiceXML <catch> element: [0000] <catch event=“click map google”>   <vxml:if cond=“_event == ‘click””>     <vxml:value expr=“clickOnElement($search-       action.substr($search-action.indexOf(‘.’) + 1))”/>   <vxml:elseif cond=“_event == ‘map’”/>     <vxml:value       expr=“window.location(‘http://maps.yahoo.com/       index.p       hp#q1=’ + $search-action.substr($search-       results.indexOf(‘.’) + 1)” + ‘)’”/>   <vxml:elseif cond=“_event == ‘google’”/>     <vxml:value       expr=“window.open(‘http://www.google.com/search?q       =’ + $search-action.substr($search-action.indexOf(‘.’) +       1) + ‘)’”/>   </vxml:if> </catch> [0167] The multimodal browser (196) executes the exemplary VoiceXML <catch> element above when the ‘application.lastresult$.interpretation.search-action’ event is triggered and contains a value of ‘click,’ ‘map,’ or ‘google.’ If the ‘search-action’ variable contains an action identifier (624) having a value of ‘click,’ then the multimodal browser (196) locates the matched search result (508) represented as a hyperlink in a DOM node and actives the hyperlink using the ‘clickOnElement’ function. If the ‘search-action’ variable contains an action identifier (624) having a value of ‘google,’ then the multimodal browser (196) locates the matched search result (508) in a DOM node and opens a new window for obtaining web pages that contain the matched search result (508) using Google™. If the ‘search-action’ variable contains an action identifier (624) having a value of ‘map,’ then the multimodal browser (196) locates the matched search result (508) in a DOM node and changes the current document to a web page that maps the matched search result (508) using Yahoo!® maps. If the ‘search-action’ variable contains an action identifier (624) having a value of ‘google,’ then the multimodal browser (196) locates the matched search result (508) in a DOM node and opens a new window for obtaining web pages that contain the matched search result (508) using Google™. [0168] The exemplary embodiments for speech-enabled web content searching described above are implemented using a multimodal browser. Speech-enabled web content searching using a multimodal browser advantageously allows speech-enabled searching of web content regardless of whether the web-content is speech-enabled. Such an advantage may be obtained because the speech-enabled functionality that permits web content searching according to embodiments of the present invention is implemented at the browser level through the multimodal browser itself and its supporting components such as a VoiceXML interpreter and ASR engine. [0169] Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for speech-enabled web content searching using a multimodal browser. Readers of skill in the art will recognize, however, that the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine-readable information, including magnetic media, optical media, or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes, compact disks for optical drives, magnetic tape, and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as, for example, Ethernets™ and networks that communicate with the Internet Protocol and the World Wide Web. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that, although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware, nevertheless, alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention. [0170] It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.
